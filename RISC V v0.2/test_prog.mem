// This can be single stepped in the testbench
// 00000000_00000000_0000_010_000_000000  // 00 00 load R0 <- Mem(R2 + 0)                  ALU_op = 000  R0 = 1 Mem[0 + 0] 
// 00000000_00000000_0000_010_001_000100  // 04 04 load R1 <- Mem(R2 + 4)                  ALU_op = 000  R1 = 2 Mem[0 + 4]
// 00000000_00000000_0010_000_001_010_000 // 08 08 Add R2 <- R0 + R1                       ALU_op = 000  R2 = 3
// 00000000_00000000_0001_001_010_000_000 // 0c 12 Store Mem(R1 + 0) <- R2                 ALU_op = 000  Mem[4 + 0] = 3
// 00000000_00000000_0011_000_001_010_000 // 10 16 sub R2 <- R0 - R1                       ALU_op = 001  R2 = 1111_1111_1111_1111__1111_1111_1111_1111 (-1)
// 00000000_00000000_0100_000_001_010_000 // 14 20 invert R2 <- !R0                        ALU_op = 100  R2 = 1111111111111110
// 00000000_00000000_0101_000_001_010_000 // 18 24 logical shift left R2 <- R0<<R1         ALU_op = 011  R2 = 0000000000000100
// 00000000_00000000_0110_000_001_010_000 // 1c 28 logical shift right R2 <- R0>>R1        ALU_op = 100  R2 = 0000000000000000
// 00000000_00000000_0111_000_001_010_000 // 20 32 AND R2<- R0 AND R1                      ALU_op = 101  R2 = 0000000000000000
// 00000000_00000000_1000_000_001_010_000 // 24 36 OR R2<- R0 OR R1                        ALU_op = 110  R2 = 0000000000000011
// 00000000_00000000_1001_000_001_010_000 // 28 40 SLT R2 <- 1 if R0 < R1                  ALU_op = 111  R2 = 0000000000000001
// 00000000_00000000_0010_000_000_000_000 // 2c 44 Add R0 <- R0 + R0                       ALU_op = 000  R0 = 0000000000000010
// 00000000_00000000_1011_000_010_000010  // 30 48 BEQ branch to jump if R0==R2            will not branch
// 00000000_00000000_1100_000_010_000001  // 34 52 BNE branch to jump if R0!=R2            will branch to 3c / 17
// 00000000_00000000_1101_000000000000    // 38 56 J jump to 0
// 00000000_00000000_1101_000000000100    // 3c 60 J jump to 10 / 16 


//        000000_000_000_00_010_00000_000_000_0000 
//        000100_000_000_00_010_00000_001_000_0000 
//        000000_000_001_00_000_00000_010_000_0010 
//        000000_000_010_00_001_00000_000_000_0001 
//        000000_000_001_00_000_00000_010_000_0011 
//        000000_000_000_00_000_00000_010_000_0100 
//        000000_000_001_00_000_00000_010_000_0101 
//        000000_000_001_00_000_00000_010_000_0110 
//        000000_000_001_00_000_00000_010_000_0111 
//        000000_000_001_00_000_00000_010_000_1000 
//        000000_000_001_00_000_00000_010_000_1001 
//        000000_000_000_00_000_00000_000_000_0010 
//        000010_000_010_00_000_00000_000_000_1011 
//        000001_000_010_00_000_00000_000_000_1100 
//        000000000000_00_000_00000_000_000_1101 
//        000000000100_00_000_00000_000_000_1101 
        
        
// [start:0]
        000000_0_00000_00010_000_00011_0000000 
        000100_0_00000_00010_000_00001_0000000 
        000000_0_00001_00011_000_00010_0000010 
        000000_0_00010_00001_000_00000_0000001 
        000000_0_00001_00011_000_00010_0000011 
         000000_000000_00011_000_00010_0000100 
        000000_0_00001_00011_000_00010_0000101 
        000000_0_00001_00011_000_00010_0000110 
        000000_0_00001_00011_000_00010_0000111 
        000000_0_00001_00011_000_00010_0001000 
        000000_0_00001_00011_000_00010_0001001 
        000000_0_00011_00011_000_00011_0000010 
        000010_0_00010_00011_000_00000_0001011 
        000001_0_00010_00011_000_00000_0001100 
          000000000000_00000_000_00000_0001101 
          000000000100_00000_000_00000_0001101 