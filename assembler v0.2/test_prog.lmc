       // this can be single stepped in the testbench
       // 00000000_00000000_0000_010_000_000000  // 00 00 load r0 <- mem r2   0                  alu_op = 000  r0 = 1 mem 0   0
       // 00000000_00000000_0000_010_001_000100  // 04 04 load r1 <- mem r2   4                  alu_op = 000  r1 = 2 mem 0   4
       // 00000000_00000000_0010_000_001_010_000 // 08 08 add r2 <- r0   r1                       alu_op = 000  r2 = 3
       // 00000000_00000000_0001_001_010_000_000 // 0c 12 store mem r1   0 <- r2                 alu_op = 000  mem 4   0 = 3
       // 00000000_00000000_0011_000_001_010_000 // 10 16 sub r2 <- r0 - r1                       alu_op = 001  r2 = 1111_1111_1111_1111__1111_1111_1111_1111  -1
       // 00000000_00000000_0100_000_001_010_000 // 14 20 invert r2 <- !r0                        alu_op = 100  r2 = 1111111111111110
       // 00000000_00000000_0101_000_001_010_000 // 18 24 logical shift left r2 <- r0<<r1         alu_op = 011  r2 = 0000000000000100
       // 00000000_00000000_0110_000_001_010_000 // 1c 28 logical shift right r2 <- r0>>r1        alu_op = 100  r2 = 0000000000000000
       // 00000000_00000000_0111_000_001_010_000 // 20 32 and r2<- r0 and r1                      alu_op = 101  r2 = 0000000000000000
       // 00000000_00000000_1000_000_001_010_000 // 24 36 or r2<- r0 or r1                        alu_op = 110  r2 = 0000000000000011
       // 00000000_00000000_1001_000_001_010_000 // 28 40 slt r2 <- 1 if r0 < r1                  alu_op = 111  r2 = 0000000000000001
       // 00000000_00000000_0010_000_000_000_000 // 2c 44 add r0 <- r0   r0                       alu_op = 000  r0 = 0000000000000010
       // 00000000_00000000_1011_000_010_000010  // 30 48 beq branch to jump if r0==r2            will not branch
       // 00000000_00000000_1100_000_010_000001  // 34 52 bne branch to jump if r0!=r2            will branch to 3c / 17
       // 00000000_00000000_1101_000000000000    // 38 56 j jump to 0
       // 00000000_00000000_1101_000000000100    // 3c 60 j jump to 10 / 16
       //  start:0
       // 0       000000_000_000_00_010_00000_000_000_0000
       // 4       000100_000_000_00_010_00000_001_000_0000
       // 8       000000_000_001_00_000_00000_010_000_0010
       // 12      000000_000_010_00_001_00000_000_000_0001
       // 16      000000_000_001_00_000_00000_010_000_0011
       // 20      000000_000_000_00_000_00000_010_000_0100
       // 24      000000_000_001_00_000_00000_010_000_0101
       // 28      000000_000_001_00_000_00000_010_000_0110
       // 32      000000_000_001_00_000_00000_010_000_0111
       // 36      000000_000_001_00_000_00000_010_000_1000
       // 40      000000_000_001_00_000_00000_010_000_1001
       // 44      000000_000_000_00_000_00000_000_000_0010
       // 48      000000_000_010_00_000_00000_000_000_1011
       // 52      000000_000_010_00_000_00000_000_000_1100
       // 56      000000000000_00_000_00000_000_000_1101
       // 60      000000000010_00_000_00000_000_000_1101
// [start:0]
0       000000_000_000_00_010_00000_000_000_0000 
4       000100_000_000_00_010_00000_001_000_0000 
8       000000_000_001_00_000_00000_010_000_0010 
12      000000_000_010_00_001_00000_000_000_0001 
16      000000_000_001_00_000_00000_010_000_0011 
20      000000_000_000_000_000_00000_010_000_0100 
24      000000_000_001_00_000_00000_010_000_0101 
28      000000_000_001_00_000_00000_010_000_0110 
32      000000_000_001_00_000_00000_010_000_0111 
36      000000_000_001_00_000_00000_010_000_1000 
40      000000_000_001_00_000_00000_010_000_1001 
44      000000_000_000_00_000_00000_000_000_0010 
48      000010_000_010_00_000_00000_000_000_1011 
52      000001_000_010_00_000_00000_000_000_1100 
56      000000000000_00_000_00000_000_000_1101 
60      000000000100_00_000_00000_000_000_1101 
