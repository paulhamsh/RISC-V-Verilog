// This can be single stepped in the testbench

// [start:0]
// 0       000000_0_00000_00010_000_00011_0000000   // 00 00 load x3 <- Mem(x2 + 0)                  x3 = 1 Mem[0 + 0] 
// 4       000100_0_00000_00010_000_00001_0000000   // 04 04 load x1 <- Mem(x2 + 4)                  x1 = 2 Mem[0 + 4]
// 8       000000_0_00001_00011_000_00010_0000010   // 08 08 Add x2 <- x3 + x1                       x2 = 3
// 12      000000_0_00010_00001_000_00000_0000001   // 0c 12 store Mem(x1 + 0) <- x2                 Mem[4 + 0] = 3
// 16      000000_0_00001_00011_000_00010_0000011   // 10 16 sub x2 <- x3 - x1                       x2 = 1111_1111_1111_1111__1111_1111_1111_1111 (-1)
// 20       000000_000000_00011_000_00010_0000100   // 14 20 invert x2 <- !x3                        x2 = 1111111111111110
// 24      000000_0_00001_00011_000_00010_0000101   // 18 24 logical shift left x2 <- x3 << x1       x2 = 0000000000000100
// 28      000000_0_00001_00011_000_00010_0000110   // 1c 28 logical shift right x2 <- x3 >> x1      x2 = 0000000000000000
// 32      000000_0_00001_00011_000_00010_0000111   // 20 32 and x2<- x3 AND x1                      x2 = 0000000000000000
// 36      000000_0_00001_00011_000_00010_0001000   // 24 36 or x2<- x3 OR x1                        x2 = 0000000000000011
// 40      000000_0_00001_00011_000_00010_0001001   // 28 40 slt x2 <- 1 if x3 < x1                  x2 = 0000000000000001
// 44      000000_0_00000_00011_000_00000_0000010   // 2c 44 add x3 <- x3 + x3                       x3 = 0000000000000010
// 48      000010_0_00010_00000_000_00000_0001011   // 30 48 beq branch to jump if x3==x2            will not branch
// 52      000001_0_00010_00000_000_00000_0001100   // 34 52 bne branch to jump if x3!=x2            will branch to 3c / 17
// 56        000000000000_00000_000_00000_0001101   // 38 56 J jump to 0
// 60        000000000100_00000_000_00000_0001101   // 3c 60 J jump to 10 / 16 

start:
0	ld  x3, x2(0)
4	ld  x1, x2(4)
8	add x2, x3, x1
12	st  x2, x1(0)
16	sub x2, x3, x1
20	inv x2, x3
24	lsl x2, x3, x1
28	lsr x2, x3, x1
32	and x2, x3, x1
36	or  x2, x3, x1
40	slt x2, x3, x1
44	add x3, x3, x3
48	beq x3, x2, 8
52	bne x3, x2, 4
56	jmp start
60	jmp -48