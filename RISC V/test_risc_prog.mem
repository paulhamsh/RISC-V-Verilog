   000000000000_00000_000_00011_000_0011   // lw  x3, x0(0)
   000000000100_00000_000_00001_000_0011   // lw  x1, x0(4)
 000000_0_00001_00011_000_00010_011_0011   // add x2, x3, x1
  0000000_00010_00000_000_00100_010_0011   // sw  x2, x0(4)
  0100000_00001_00011_000_00010_011_0011   // sub x2, x3, x1
 
  //0000000_00000_00011_000_00010_001_0000   // inv x2, x3           NO SIMILAR INSTRUCTION YET
  111111111111_00011_100_00010_00100_11    // xori x2, x3, -1
  0000000_00001_00011_001_00010_011_0011   // sll x2, x3, x1 
  0000000_00001_00011_101_00010_011_0011   // srl x2, x3, x1  
  0000000_00001_00011_111_00010_011_0011   // and x2, x3, x1
  0000000_00001_00011_110_00010_011_0011   // or  x2, x3, x1
  0000000_00001_00011_010_00010_011_0011   // slt x2, x3, x1
  0000000_00011_00011_000_00011_011_0011   // add x3, x3, x3

  0000000_00000_00000_001_00011_011_0111   // lui x3, 1       (which is 0x1000)
  0000000_00000_00000_001_00011_001_0111   // auipc x3, 1     (which is 0x1000 + 0x34 = 0x1034)
     
 0000000_00010_00011_000_0110_0_110_0011   // beq x3, x2, 12
 0000000_00010_00011_001_0100_0_110_0011   // bne x3, x2, 8
  
//1_1111100100_1_11111111_00001_110_1111   // jal x1, start  
//1_1111101010_1_11111111_00001_110_1111   // jal x1,  -44   
   
   000000010000_00000_000_00001_110_0111   // jalr x1, x0 + 0x10   
   000000010000_00000_000_00001_110_0111   // jalr x1, x0 + 0x10  