00000000_00000000_0011_000_000_000_000 // 01 sub R0 <- R0 - R0                       ALU_op = 001  R0 = 0000000000000000
00000000_00000000_0011_001_001_001_000 // 02 sub R1 <- R1 - R1                       ALU_op = 001  R1 = 0000000000000000
00000000_00000000_0011_010_010_010_000 // 03 sub R2 <- R2 - R2                       ALU_op = 001  R2 = 0000000000000000
00000000_00000000_0000_001_011_000_000 // 04 load R3 <- Mem(R1 + 0)                  ALU_op = 000  R3 = Mem[0] = 1000_0000_0000_0001
00000000_00000000_0000_011_010_000_000 // 04 load R2 <- IO(R3 + 0)                   ALU_op = 000  R2 = IO [1]
00000000_00000000_0001_011_010_000_000 // 05 store IO(R3 + 0) <- R2                  ALU_op = 000  IO [1] = R2
00000000_00000000_0011_010_010_010_000 // 06 sub R2 <- R2 - R2                       ALU_op = 001  R2 = 0000000000000000
00000000_00000000_0011_010_010_010_000 // 07 sub R2 <- R2 - R2                       ALU_op = 001  R2 = 0000000000000000
00000000_00000000_0011_010_010_010_000 // 08 sub R2 <- R2 - R2                       ALU_op = 001  R2 = 0000000000000000
00000000_00000000_0011_010_010_010_000 // 09 sub R2 <- R2 - R2                       ALU_op = 001  R2 = 0000000000000000
00000000_00000000_0100_000_001_001_000 // 03 invert R1 <- !R0                        ALU_op = 100  R1 = 1111111111111111
00000000_00000000_0011_010_010_010_000 // 0b sub R2 <- R2 - R2                       ALU_op = 001  R2 = 0000000000000000
00000000_00000000_0011_010_010_010_000 // 0c sub R2 <- R2 - R2                       ALU_op = 001  R2 = 0000000000000000
00000000_00000000_0011_010_010_010_000 // 0d sub R2 <- R2 - R2                       ALU_op = 001  R2 = 0000000000000000
00000000_00000000_1101_000000000000    // 0e jmp jump to the beginning address